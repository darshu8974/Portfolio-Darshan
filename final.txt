//final

//ex 1  SERVER INSTANCE [EC2]

Connect ---->

    1  yum install httpd
    2  httpd --version
    3  service httpd start
    4  cd /var/www/html
    5  vi index.html
    -->then give i ,(shift+insert paste code) , escape , :wq! enter
    6  history



#!/bin/bash

yum update -y

yum install httpd -y

yum install git -y

git clone https://github.com/darshu8974/mywebsite.git /tmp/mywebsite

cp -R /tmp/mywebsite/* /var/www/html/

systemctl enable httpd

systemctl start httpd

.....................................


// EX 6 : DOCKER ON AWS 

sudo su
yum install docker
docker --version
systemctl start docker
docker run hello-world
docker volume create my_volume
docker run -d --name my_nginx -v my_volume:/usr/share/nginx/html -p 80:80 nginx
docker inspect my_nginx


.....................................

//EX 7 : DOCKER COMPOSE UP ON AWS:-

sudo su
yum install docker
docker --version
systemctl start docker
systemctl stop httpd
sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
nano docker-compose.yml
(version code type - ctrl+o enter ctrl+x)
docker-compose --version
docker-compose up



version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - my_network

  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: example_password
      MYSQL_DATABASE: my_database
      MYSQL_USER: my_user
      MYSQL_PASSWORD: my_password
    networks:
      - my_network

  nodejs:
    image: node:latest
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

.....................................



// EX 8 : Test driven Development

public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
    public int sub(int a, int b) {
        return a-b;
    }
    public int mul(int a, int b) {
        return a*b;
    }
    public int div(int a, int b) {
        return a/b;
    }
}


.....

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalculatorTest {
    @Test
    public void testAdd() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.add(2, 3));
    }
    @Test
    public void testSub() {
        Calculator calc = new Calculator();
        assertEquals(0, calc.sub(2, 2));
    }
    @Test 
    public void testMul() {
        Calculator cal = new Calculator();
        assertEquals(15, cal.mul(3, 5));
    }
    @Test
    public void testDiv()
    {
        Calculator c=new Calculator();
        assertEquals(1, c.div(2,2));
    }
}

.......

mkdir -p src test
cd test
touch CalculatorTest.java
cd ..
cd src 
touch Calculator.java


wget https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar

wget https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar

javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar src/Calculator.java test/CalculatorTest.java

java -cp .:src:test:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore CalculatorTest


..........................................

// EX 9 : SERVICE CREATION

//AWS SERVICE STEPS

create clustor

give clustor name

Aws fargate choose (serverless) >>>

go to task definitions

give create new Task definition

give a new task definition name 

select AWS fargate for serverless compute

task size - 0.5 vcpu and memory 1 gb

give a new task bala name

give image url as nginxdemos/image.>>>

go to clustor and create new service 

give the task family name and aslo new service name 

networking - create new security group and proceed

then loadbalancing - give load balancer name 



..................................



//EX 10 ec2 code bash

#!/bin/bash

yum update -y

yum install httpd -y

echo "<h1>This is from $(hostname -f)</h1>" > /var/www/html/index.html
 
systemctl enable httpd

systemctl start httpd















